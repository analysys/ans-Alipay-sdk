var $lib = 'Alipay';
var $lib_version = '5.0.1';
var $ans = 'ALP';
var globalWindow = my;
// sdk配置参数默认值
function optionsDefault() {
    return {
        appkey: '',
        uploadURL: '',
        debugMode: 0,
        auto: true,
        autoProfile: true,
        encryptType: 0,
        autoShare: false,
        allowTimeCheck: false,
        maxDiffTimeInterval: 30,
        autoTrack: false,
        autoCompleteURL: true,
        autoPageViewDuration: false,
        sendDataTimeout: 10000,
        $appid: '',
        $appname: ''
    };
}
//# sourceMappingURL=index.js.map

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var typeMap = {};
var typeArr = ['Boolean', 'Number', 'String', 'Function', 'Array', 'Date', 'RegExp', 'Object', 'Error'];
typeArr.map(function (item) {
    typeMap["[object " + item + "]"] = item.toLowerCase();
});
function type(value) {
    var typeName = typeof value === 'undefined' ? 'undefined' : _typeof(value);
    if (typeName === 'object') {
        return typeMap[Object.prototype.toString.call(value)];
    }
    return typeName;
}
function isNumber(value) {
    return type(value) === 'number';
}
function isString(value) {
    return type(value) === 'string';
}
function isArray(value) {
    return Array.isArray(value);
}
function isBoolean(value) {
    return type(value) === 'boolean';
}
function isObject(value) {
    return type(value) === 'object';
}
function isFunction(value) {
    return type(value) === 'function';
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

var firstVisitTime = '$first_visit_time';
// 只读属性，无法被更改
var readOnlyAttrs = ['$lib', '$lib_version', '$platform', firstVisitTime, '$debug', '$is_login'];
// 公共预制属性，任何事件上报都会带上这些属性
var publicAttrs = ['$appid', '$appname', '$lib', '$lib_version', '$platform', '$is_login', '$debug'];
// 行为事件上报会带上这部分属性
var actionEventAttrs = ['$brand', '$model', '$os', '$os_version', '$browser', '$browser_version', '$network', '$screen_width', '$screen_height', '$language', '$time_zone', '$session_id', '$is_time_calibrated'];
// utm相关属性
var utmAttrs = ['$utm_campaign_id', '$utm_campaign', '$utm_medium', '$utm_source', '$utm_content', '$utm_term'];
// 预制事件列表与事件属性
var events = {
    $startup: __spreadArrays(actionEventAttrs, utmAttrs, ['$is_first_day', '$is_first_time', '$scene']),
    $end: __spreadArrays(actionEventAttrs, ['$duration', '$is_first_day']),
    $pageview: __spreadArrays(actionEventAttrs, utmAttrs, ['$is_first_day', '$referrer', '$scene', '$startup_time', '$url', '$url_domain', '$share_id', '$share_path', '$share_level']),
    page_close: __spreadArrays(actionEventAttrs, ['$url', '$referrer', '$url_domain', 'pagestaytime']),
    $alias: ['$original_id'],
    $share: actionEventAttrs,
    $user_click: __spreadArrays(actionEventAttrs, ['$element_content', '$element_id', '$element_type', '$element_name', '$element_function', '$url', '$url_path', '$is_first_day']),
    track: actionEventAttrs,
    $getPresetProperties: __spreadArrays(actionEventAttrs, [firstVisitTime]),
    $profile_set_once: [firstVisitTime, '$first_visit_language']
};
//# sourceMappingURL=eventAttrs.js.map

function keyErr(type) {
    return "{FN}:Property value invalid of key[{KEY}], support type: " + type + "\n\tcurrent value: {VALUE}\n\tcurrent type: {VALUETYPE}";
}
// 长度提示
function lenRrrlog(lens) {
    return "{FN}:The length of the property key (string[{KEY}]) needs to be " + lens + " !";
}
var errorMessage = {
    'common': '',
    '60001': '{FN}:Property key invalid, support type: String \n' + 'current key:{KEY}\n' + 'current keyType:{KEYTYPE}',
    '60002': keyErr('Number'),
    '60003': keyErr('Boolean'),
    '60005': '{FN}:The length of the property[{KEY}] value (string[{VALUE}]) needs to be 1-255 !',
    '60006': 'Please set appkey first.',
    '60007': 'Please set uploadURL first.',
    '60008': 'Send message failed.',
    '60009': lenRrrlog('1-125'),
    '600010': lenRrrlog('1-99'),
    '600012': '{FN}:Property key invalid, nonsupport value: ' + readOnlyAttrs.join('/') + ' \n' + 'current KEY:{KEY}',
    '600016': '{FN}: Property value invalid, support type: Object \n' + 'current value:{VALUE}\n' + 'current type: {VALUETYPE}',
    '600020': 'DebugMode only can be 0,1,2',
    '600022': '{FN}: 属性[{KEY}]的值[{VALUE}]无效，支持类型：String/Number/Boolean/string[]，若为字符串，长度范围1-255字符',
    '600023': '{FN}: 属性key的名称[{KEY}]无效，属性key是以字母开头的字符串，由字母、数字、下划线组成，字母不区分大小写，不支持乱码、中文、空格等，长度范围1-99字符；',
    '600025': '{FN}: 事件名称[{VALUE}]无效，事件ID必须字母或者$开头，可包含数字字母与下划线，1-99个字符；'
};
var successMessage = {
    'common': '',
    '20001': 'Send message success',
    '20002': '{FN}: set success ({VALUE})',
    '20003': '{FN}:({VALUE}) delete success',
    '20004': '{FN}:clear success',
    '20005': '{FN}:reset success',
    '20006': 'set appkey success. current appkey : {VALUE}',
    '20007': 'Init Analysysdata ' + $lib + ' sdk success, version : ' + $lib_version + '',
    '20008': 'set uploadURL success. current uploadURL : {VALUE}',
    '20009': '{FN}:[{KEY}] : get failed',
    '20010': '{FN}:[{KEY}] : get success. ({VALUE})',
    '20011': '{FN}:({VALUE}) delete failed',
    '20012': 'Send Message to Server: {KEY} \n' + 'data:{VALUE}',
    '20013': "收到服务器的时间: {VALUE} \n" + "本地时间: {KEY} \n" + "时间相差:  {FN} \n" + "数据将会进行时间校准",
    '20014': 'aliasID already bound'
};
function successLog(opt) {
    if (config.debugMode === 1 || config.debugMode === 2) {
        var msgTemp = successMessage[opt.code] || successMessage.common;
        var showMsg = msgTemp.replace(/{FN}/, opt.fn).replace(/{KEY}/g, opt.key || '').replace(/{VALUE}/g, JSON.stringify(opt.value));
        console.log(showMsg);
    }
}
function errorLog(opt, isInit) {
    var msgTemp = errorMessage[opt.code] || errorMessage.common;
    var showMsg = msgTemp.replace(/{FN}/g, opt.fn || '').replace(/{KEY}/g, JSON.stringify(opt.key || '')).replace(/{VALUE}/g, JSON.stringify(opt.value)).replace(/{VALUETYPE}/g, type(opt.value)).replace(/{KEYTYPE}/g, type(opt.key));
    if (config.debugMode === 1 || config.debugMode === 2 || isInit) {
        console.warn(showMsg);
    }
}
//# sourceMappingURL=index.js.map

/**
 * 长度校验
 * @param value
 * @param max
 * @param min
 * @returns
 */
function lengthCheck(value, max, min) {
    if (max === void 0) {
        max = 255;
    }
    if (min === void 0) {
        min = 1;
    }
    if (!isString(value)) {
        return false;
    }
    var len = value.length;
    return len < max && len >= min;
}
/**
 * 自定义属性key校验
 * @param value
 * @param eventName
 * @returns
 */
function attrNameCheck(value, logObj) {
    var state = true;
    if (!lengthCheck(value, 99)) {
        state = false;
    } else if (readOnlyAttrs.indexOf(value) > -1) {
        state = false;
        if (logObj) {
            logObj.code = 600012;
        }
    } else {
        state = /^[$a-zA-Z][a-zA-Z0-9_$]{0,}$/.test(value);
    }
    if (logObj && logObj.fn && !state) {
        errorLog(logObj);
    }
    return state;
}
/**
 * 自定义属性值校验
 * @param value
 */
function attrValueCheck(value, logObj) {
    var state = false;
    if (isString(value) || isNumber(value) || isArray(value) || isBoolean(value)) {
        state = true;
        if (isString(value)) {
            if (!lengthCheck(value, 255)) {
                state = false;
            }
        } else if (isArray(value)) {
            var some = value.some(function (o) {
                return lengthCheck(o, 255);
            });
            state = some;
        }
    }
    if (logObj && logObj.fn && logObj.key && !state) {
        errorLog(logObj);
    }
    return state;
}
/**
 * 属性校验，不通过的提示并删除
 * @param value
 * @param eventName 事件名称, 如果存在则抛出错误提示
 */
function attrCheck(value, eventName) {
    var arrs = {};
    if (value) {
        if (!isObject(value)) {
            errorLog({
                code: 600016,
                fn: eventName,
                value: value
            });
            return {};
        }
        for (var key in value) {
            var item = value[key];
            if (attrNameCheck(key, { code: 600023, fn: eventName, key: key }) && attrValueCheck(item, { code: 600022, fn: eventName, key: key, value: item })) {
                arrs[key] = item;
            }
        }
    }
    return arrs;
}
//# sourceMappingURL=index.js.map

var setStorage = function setStorage(key, data) {
    if (key === void 0) {
        key = 'FZ_STROAGE';
    }
    if (data === void 0) {
        data = getCore();
    }
    globalWindow.setStorageSync({ key: key, data: data });
};
var getStorage = function getStorage(key) {
    if (key === void 0) {
        key = 'FZ_STROAGE';
    }
    var res = globalWindow.getStorageSync({ key: key });
    return res.data;
};
//# sourceMappingURL=index.js.map

/*
md5.js
*/
function MD5(str, bit) {
    var sMessage = str;
    function RotateLeft(lValue, iShiftBits) {
        return lValue << iShiftBits | lValue >>> 32 - iShiftBits;
    }
    function AddUnsigned(lX, lY) {
        var lX4, lY4, lX8, lY8, lResult;
        lX8 = lX & 0x80000000;
        lY8 = lY & 0x80000000;
        lX4 = lX & 0x40000000;
        lY4 = lY & 0x40000000;
        lResult = (lX & 0x3FFFFFFF) + (lY & 0x3FFFFFFF);
        if (lX4 & lY4) return lResult ^ 0x80000000 ^ lX8 ^ lY8;
        if (lX4 | lY4) {
            if (lResult & 0x40000000) return lResult ^ 0xC0000000 ^ lX8 ^ lY8;else return lResult ^ 0x40000000 ^ lX8 ^ lY8;
        } else return lResult ^ lX8 ^ lY8;
    }
    function F(x, y, z) {
        return x & y | ~x & z;
    }
    function G(x, y, z) {
        return x & z | y & ~z;
    }
    function H(x, y, z) {
        return x ^ y ^ z;
    }
    function I(x, y, z) {
        return y ^ (x | ~z);
    }
    function FF(a, b, c, d, x, s, ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(F(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    }
    function GG(a, b, c, d, x, s, ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(G(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    }
    function HH(a, b, c, d, x, s, ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(H(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    }
    function II(a, b, c, d, x, s, ac) {
        a = AddUnsigned(a, AddUnsigned(AddUnsigned(I(b, c, d), x), ac));
        return AddUnsigned(RotateLeft(a, s), b);
    }
    function ConvertToWordArray(sMessage) {
        var lWordCount;
        var lMessageLength = sMessage.length;
        var lNumberOfWords_temp1 = lMessageLength + 8;
        var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - lNumberOfWords_temp1 % 64) / 64;
        var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
        var lWordArray = Array(lNumberOfWords - 1);
        var lBytePosition = 0;
        var lByteCount = 0;
        while (lByteCount < lMessageLength) {
            lWordCount = (lByteCount - lByteCount % 4) / 4;
            lBytePosition = lByteCount % 4 * 8;
            lWordArray[lWordCount] = lWordArray[lWordCount] | sMessage.charCodeAt(lByteCount) << lBytePosition;
            lByteCount++;
        }
        lWordCount = (lByteCount - lByteCount % 4) / 4;
        lBytePosition = lByteCount % 4 * 8;
        lWordArray[lWordCount] = lWordArray[lWordCount] | 0x80 << lBytePosition;
        lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
        lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
        return lWordArray;
    }
    function WordToHex(lValue) {
        var WordToHexValue = "",
            WordToHexValue_temp = "",
            lByte,
            lCount;
        for (lCount = 0; lCount <= 3; lCount++) {
            lByte = lValue >>> lCount * 8 & 255;
            WordToHexValue_temp = "0" + lByte.toString(16);
            WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
        }
        return WordToHexValue;
    }
    var x = [];
    var k, AA, BB, CC, DD, a, b, c, d;
    var S11 = 7,
        S12 = 12,
        S13 = 17,
        S14 = 22;
    var S21 = 5,
        S22 = 9,
        S23 = 14,
        S24 = 20;
    var S31 = 4,
        S32 = 11,
        S33 = 16,
        S34 = 23;
    var S41 = 6,
        S42 = 10,
        S43 = 15,
        S44 = 21;
    // Steps 1 and 2. Append padding bits and length and convert to words 
    x = ConvertToWordArray(sMessage);
    // Step 3. Initialise 
    a = 0x67452301;
    b = 0xEFCDAB89;
    c = 0x98BADCFE;
    d = 0x10325476;
    // Step 4. Process the message in 16-word blocks 
    for (k = 0; k < x.length; k += 16) {
        AA = a;
        BB = b;
        CC = c;
        DD = d;
        a = FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
        d = FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
        c = FF(c, d, a, b, x[k + 2], S13, 0x242070DB);
        b = FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
        a = FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
        d = FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
        c = FF(c, d, a, b, x[k + 6], S13, 0xA8304613);
        b = FF(b, c, d, a, x[k + 7], S14, 0xFD469501);
        a = FF(a, b, c, d, x[k + 8], S11, 0x698098D8);
        d = FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
        c = FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
        b = FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
        a = FF(a, b, c, d, x[k + 12], S11, 0x6B901122);
        d = FF(d, a, b, c, x[k + 13], S12, 0xFD987193);
        c = FF(c, d, a, b, x[k + 14], S13, 0xA679438E);
        b = FF(b, c, d, a, x[k + 15], S14, 0x49B40821);
        a = GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
        d = GG(d, a, b, c, x[k + 6], S22, 0xC040B340);
        c = GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
        b = GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
        a = GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
        d = GG(d, a, b, c, x[k + 10], S22, 0x2441453);
        c = GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
        b = GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
        a = GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
        d = GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
        c = GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
        b = GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
        a = GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
        d = GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
        c = GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
        b = GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);
        a = HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
        d = HH(d, a, b, c, x[k + 8], S32, 0x8771F681);
        c = HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
        b = HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
        a = HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
        d = HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
        c = HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
        b = HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
        a = HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
        d = HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
        c = HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
        b = HH(b, c, d, a, x[k + 6], S34, 0x4881D05);
        a = HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
        d = HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
        c = HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
        b = HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);
        a = II(a, b, c, d, x[k + 0], S41, 0xF4292244);
        d = II(d, a, b, c, x[k + 7], S42, 0x432AFF97);
        c = II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
        b = II(b, c, d, a, x[k + 5], S44, 0xFC93A039);
        a = II(a, b, c, d, x[k + 12], S41, 0x655B59C3);
        d = II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
        c = II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
        b = II(b, c, d, a, x[k + 1], S44, 0x85845DD1);
        a = II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
        d = II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
        c = II(c, d, a, b, x[k + 6], S43, 0xA3014314);
        b = II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
        a = II(a, b, c, d, x[k + 4], S41, 0xF7537E82);
        d = II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
        c = II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
        b = II(b, c, d, a, x[k + 9], S44, 0xEB86D391);
        a = AddUnsigned(a, AA);
        b = AddUnsigned(b, BB);
        c = AddUnsigned(c, CC);
        d = AddUnsigned(d, DD);
    }
    if (bit === 32) {
        return WordToHex(a) + WordToHex(b) + WordToHex(c) + WordToHex(d);
    }
    return WordToHex(b) + WordToHex(c);
}
//# sourceMappingURL=index.js.map

/**
 * 返回核心数据默认值
 * @returns object
 */
function coreDefault() {
    return {
        ARKAPPID: config.appkey,
        ARKDEBUG: config.debugMode,
        ARKUPLOADURL: config.uploadURL,
        ARKFRISTPROFILE: '',
        ARKFRISTPROFILESEND: false,
        ARKSUPER: {},
        ARK_ID: setId(),
        FRISTDAY: 0,
        POSTDATA: [],
        SEESIONDATE: 0,
        SEESIONID: ''
    };
}
var core;
/**
 * 初始化
 */
function setDefCore() {
    core = coreDefault();
    setStorage();
}
function coreInit() {
    var storageCore = getStorage();
    if (!storageCore) {
        setDefCore();
    } else {
        var ARKDEBUG = storageCore.ARKDEBUG;
        if (config.appkey !== storageCore.ARKAPPID || ARKDEBUG === 1 && ARKDEBUG !== config.debugMode || storageCore.ARKUPLOADURL !== config.uploadURL) {
            setDefCore();
        } else {
            core = storageCore;
        }
    }
}
function getCore() {
    return core;
}
// 重置缓存数据
function resetCore() {
    core.ARK_ID = setId();
    core.ARK_TRACKID = '';
    core.ARK_LOGINID = '';
    core.ARKSUPER = {};
    core.ARKFRISTPROFILE = '';
    core.ARKFRISTPROFILESEND = false;
    setSessionId();
}
/**
 * 获取当前用户id
 * 优先获取登录后id => 用户自定义匿名id => 系统生成匿名id
 */
function getId() {
    return core.ARK_LOGINID || core.ARK_TRACKID || core.ARK_ID;
}
/**
 * 系统设置匿名id
 * @returns
 */
function setId() {
    var timeRandom = new Date().getTime() + '' + Math.random() * 10000;
    return $ans + MD5(timeRandom, 32) + MD5(timeRandom, 32).slice(0, 4);
}
/**
 * 获取sessionId
 */
function getSessionId() {
    var date = new Date();
    var nowDate = date.getTime();
    var offset_GMT = date.getTimezoneOffset();
    var nowDay = new Date(nowDate + offset_GMT * 60 * 1000 + 8 * 60 * 60 * 1000).getDate();
    var sessionDay = !core.SEESIONDATE ? 0 : new Date(core.SEESIONDATE + offset_GMT * 60 * 1000 + 8 * 60 * 60 * 1000).getDate();
    if (!core.SEESIONID || !core.SEESIONDATE || nowDate - core.SEESIONDATE > 30 * 60 * 1000 || sessionDay !== nowDay) {
        setSessionId();
    }
    return core.SEESIONID;
}
/**
 * 设置sessionid
 */
function setSessionId() {
    var date = +new Date();
    core.SEESIONDATE = date;
    core.SEESIONID = MD5($ans + date + '' + Math.random(), 16);
    setStorage();
}
/**
 * 用户手动设置匿名id
 * @param xwho
 */
function setAnonymousID(xwho) {
    core.ARK_TRACKID = xwho;
    setStorage();
}
/**
 * 获取用户通过identify接口设置或自动生成的id，优先级如下： 用户设置的id > 代码自动生成的id
 */
function getAnonymousID() {
    return core.ARK_TRACKID || core.ARK_ID;
}
// 通用属性
/**
 * 获取指定通用属性或全部通用属性
 * @param superPropertyName 属性名称
 * @returns
 */
function getSuperProperty(superPropertyName) {
    if (superPropertyName) {
        return core.ARKSUPER[superPropertyName];
    }
    return core.ARKSUPER;
}
/**
 * 设置通用属性
 * @param property 属性
 */
function setSuperProperty(property) {
    core.ARKSUPER = Object.assign({}, core.ARKSUPER, property);
    setStorage();
}
/**
 * 删除指定通用属性或全部通用属性
 * @param superPropertyName 属性名称
 */
function delSuperProperty(superPropertyName) {
    // 删除指定属性
    if (superPropertyName && core.ARKSUPER[superPropertyName]) {
        delete core.ARKSUPER[superPropertyName];
    }
    // 删除全部
    if (superPropertyName === undefined) {
        core.ARKSUPER = {};
    }
    setStorage();
}
// 添加上报数据
function addPostData(option) {
    if (!core.POSTDATA) {
        core.POSTDATA = [];
    }
    if (core.POSTDATA.length < 500) {
        core.POSTDATA.push(option);
        setStorage();
    }
}
// 删除上报数据
function delPostData(arrData) {
    var arrDataMap = {};
    arrData.forEach(function (o) {
        arrDataMap[o.xwhen] = 1;
    });
    for (var i = core.POSTDATA.length - 1; i >= 0; i--) {
        var item = core.POSTDATA[i];
        if (arrDataMap[item.xwhen]) {
            core.POSTDATA.splice(i, 1);
        }
    }
    setStorage();
}
// 获取上报数据
function getPostData() {
    return __spreadArrays(core.POSTDATA);
}
//# sourceMappingURL=core.js.map

/**
 * 网络信息
 */
var network = {
    networkType: ''
};
globalWindow.onNetworkStatusChange(function (res) {
    network.networkType = res.networkType;
});
//# sourceMappingURL=network.js.map

var io = (function (options, _success) {
    return new Promise(function (resolve, reject) {
        globalWindow.request(__assign(__assign({}, options), { success: function success(res) {
                var data = res.data;
                // const setData = (code) => {
                //   data = {
                //     code: code
                //   }
                // }
                _success && _success(res);
                // if (isString(data)) {
                //   if (data == "H4sIAAAAAAAAAKtWSs5PSVWyMjIwqAUAVAOW6gwAAAA=") {
                //     setData(200)
                //   } else if (data == "H4sIAAAAAAAAAKtWSs5PSVWyMjUwqAUA7TtBdwwAAAA=") {
                //     setData(500)
                //   } else if (data == "H4sIAAAAAAAAAKtWSs5PSVWyMjEy0FHKLU5XslJySSxJVHBJTS6qLChRcC0qyi/S01OqBQBdATGSKQAAAA==") {
                //     setData(420)
                //   } else {
                //     setData(200)
                //   }
                //   data.code === 200 ? resolve(data) : reject(data)
                // } else {
                //   reject(data)
                // }
                data && (data.code === 200 || data === 'Status: OK') ? resolve(data) : reject(data);
            },
            fail: function fail(e) {
                _success && _success(e);
                reject(e);
            } }));
    });
});
//# sourceMappingURL=index.js.map

function dateFormat(date, format) {
    var offset_GMT = date.getTimezoneOffset();
    date = new Date(date.getTime() + offset_GMT * 60 * 1000 + 8 * 60 * 60 * 1000); //转换为东八区时间
    var o = {
        "M+": date.getMonth() + 1,
        "d+": date.getDate(),
        "h+": date.getHours(),
        "m+": date.getMinutes(),
        "s+": date.getSeconds(),
        "q+": Math.floor((date.getMonth() + 3) / 3),
        "S+": date.getMilliseconds() //millisecond
    };
    if (/(y+)/.test(format)) format = format.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o) {
        if (new RegExp("(" + k + ")").test(format)) format = format.replace(RegExp.$1, RegExp.$1.length == 3 ? ("" + o[k]).length < 3 ? ("00" + o[k]).substr(("00" + o[k]).length - 3, ("00" + o[k]).length) : o[k] : ("00" + o[k]).substr(("" + o[k]).length));
    }return format;
}
function clientTimeZone() {
    var munites = new Date().getTimezoneOffset();
    var hour = munites / 60;
    var munite = munites % 60;
    var prefix = "-";
    if (hour <= 0 || munite < 0) {
        prefix = "+";
        hour = -hour;
        if (munite < 0) {
            munite = -munite;
        }
    }
    hour = hour + "";
    munite = munite + "";
    if (hour.length == 1) {
        hour = "0" + hour;
    }
    if (munite.length == 1) {
        munite = "0" + munite;
    }
    return prefix + hour + ':' + munite;
}
//# sourceMappingURL=index.js.map

/**
 * 服务器时间，开始时间校准时用到
 */
// 服务器时间与本地时间的差值
var timeDiff = 0;
/**
 * 返回校准后的当前时间
 *
 */
function getNow() {
    var now = +new Date();
    return now + timeDiff;
}
//# sourceMappingURL=time.js.map

function ready(callback, isTop) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
    };
}
//# sourceMappingURL=index.js.map

var configRule = {
    appkey: {
        verify: [lengthCheck]
    },
    uploadURL: {
        verify: [lengthCheck]
    },
    debugMode: {
        verify: [isNumber]
    },
    auto: {
        verify: [isBoolean]
    },
    autoProfile: {
        verify: [isBoolean]
    },
    encryptType: {
        verify: [isNumber]
    },
    autoShare: {
        verify: [isBoolean]
    },
    allowTimeCheck: {
        verify: [isBoolean]
    },
    maxDiffTimeInterval: {
        verify: [isNumber, function (value) {
            if (value <= 0) {
                return false;
            }
            return true;
        }]
    },
    autoTrack: {
        verify: [isBoolean]
    },
    autoCompleteURL: {
        verify: [isBoolean]
    },
    autoPageViewDuration: {
        verify: [isBoolean]
    },
    sendDataTimeout: {
        verify: [isNumber]
    },
    $appname: {
        verify: [isString]
    },
    $appid: {
        verify: [isString]
    }
};
var config = optionsDefault();
function setConfig(options, isVerify) {
    if (isVerify === void 0) {
        isVerify = true;
    }
    return new Promise(function (resolve, reject) {
        if (isVerify) {
            var optionArr = Object.keys(options);
            optionArr.forEach(function (o) {
                var rule = configRule[o];
                if (rule && rule.verify.length) {
                    var value = options[o];
                    var isOk = true;
                    for (var i = 0; i < rule.verify.length; i++) {
                        var fn = rule.verify[i];
                        if (!fn(value)) {
                            isOk = false;
                            break;
                        }
                    }
                    if (!isOk) {
                        errorLog({
                            key: o,
                            code: 60002,
                            value: value
                        }, true);
                    } else {
                        config[o] = value;
                    }
                }
            });
        }
        coreInit();
        resolve(config);
    });
}
//# sourceMappingURL=config.js.map

function setAttrs(superProperty, methodName) {
    var attrs = attrCheck(superProperty, methodName);
    if (Object.keys(attrs).length) {
        setSuperProperty(attrs);
        successLog({
            fn: methodName,
            code: 20002,
            value: superProperty
        });
    }
}
/**
 * 设置单个通用属性
 * @param name string
 * @param value string  number  boolean Array<string>
 */
function registerSuperProperty(name, value) {
    var _a;
    var methodName = '$registerSuperProperty';
    if (attrNameCheck(name, { code: 600023, fn: methodName, key: name })) {
        var obj = (_a = {}, _a[name] = value, _a);
        setAttrs(obj, methodName);
    }
}
/**
 * 设置多个属性
 * @param superProperty 属性
 * @returns
 */
function registerSuperProperties(superProperty) {
    setAttrs(superProperty, '$registerSuperProperties');
}
/**
 * 获取单个通用属性
 */
function getSuperProperty$1(superPropertyName) {
    return getSuperProperty(superPropertyName);
}
/**
 * 获取所有通用属性
 */
function getSuperProperties() {
    return getSuperProperty();
}
/**
 * 删除单个属性
 * @param superPropertyName 属性名称
 */
function unRegisterSuperProperty(superPropertyName) {
    delSuperProperty(superPropertyName);
    successLog({
        fn: '$unRegisterSuperProperty',
        code: 20003,
        value: superPropertyName
    });
}
/**
 * 删除所有属性
 */
function clearSuperProperties() {
    delSuperProperty();
    successLog({
        fn: '$clearSuperProperties',
        code: 20004
    });
}
//# sourceMappingURL=superProperty.js.map

// 一次最多上报20条
var MAXLINENUM = 20;
// 上报失败后重试次数
var RETRNUM = 3;
// 正在上报数据
var doingList = [];
// 当前重试次数
var retryCount = 0;
// 回调函数
var callbackFnMap = {};
// 发送请求
function postData() {
    // 待上报数据
    var todoList = getPostData();
    if (doingList.length || !todoList.length) {
        return;
    }
    // 取出最多 MAXLINENUM 条数据进入上报队列
    doingList = todoList.splice(0, MAXLINENUM);
    var option = {
        url: config.uploadURL + '/up' + '?appid=' + config.appkey,
        data: doingList,
        encryptType: config.encryptType
    };
    successLog({
        key: option.url,
        value: doingList,
        code: 20012
    });
    // 开启调试模式，不入库
    if (config.debugMode === 1) {
        delPostData(doingList);
        doingList = [];
        return;
    }
    if (globalWindow.AnalysysAgent.encrypt && isFunction(globalWindow.AnalysysAgent.encrypt.uploadData)) {
        option = globalWindow.AnalysysAgent.encrypt.uploadData(option);
    }
    // ea 上报数据
    globalWindow.AnalysysModal && globalWindow.AnalysysModal(doingList);
    io({
        url: option.url,
        method: 'POST',
        data: option.data,
        timeout: config.sendDataTimeout
    }).then(function (res) {
        // 上报成功后删除队列与相应的缓存数据
        delPostData(doingList);
        // 执行上报成功回调函数
        doingList.forEach(function (o) {
            if (callbackFnMap[o.xwhen]) {
                callbackFnMap[o.xwhen]();
                delete callbackFnMap[o.xwhen];
            }
        });
        doingList = [];
        // 继续上报剩下的数据，如果有的话
        postData();
        successLog({
            code: 20001
        });
        retryCount = 0;
    }).catch(function (e) {
        doingList = [];
        errorLog({
            code: 60008
        });
        // 失败后重试上报，最多重试RETRNUM次
        if (retryCount < RETRNUM) {
            postData();
            retryCount++;
        }
    });
}
/**
 * 上报数据
 * @param data object
 */
function sendData(data, successFn) {
    if (!config.appkey) {
        errorLog({
            code: 60006
        });
        return;
    }
    if (!config.uploadURL) {
        errorLog({
            code: 60007
        });
        return;
    }
    // 加入待上报队列
    addPostData(data);
    postData();
    if (isFunction(successFn)) {
        callbackFnMap[data.xwhen] = successFn;
    }
}

/**
 * 设备信息
 */
var system;
//# sourceMappingURL=system.js.map

/**
 * 路径相关参数信息存储
 */
var pathParams = {
    scene: null,
    utm_campaign_id: '',
    utm_source: '',
    utm_medium: '',
    utm_term: '',
    utm_content: '',
    utm_campaign: '',
    share_id: '',
    share_level: '',
    share_path: ''
};
//# sourceMappingURL=pathParams.js.map

var eventAttribute = {
    startup: {
        state: false,
        xwhen: 0
    },
    pageview: {
        xwhen: 0,
        state: {// 当前页面pageview上报状态
        },
        query: {} // 记录当前页面的url参数
    },
    // 记录自定义时间持续时长
    timeEvent: {}
};
//# sourceMappingURL=eventAttribute.js.map

/**
 * 获取当前页面实例
 * @returns
 */
function getCurrentPage() {
    var pathArray = getCurrentPages();
    if (pathArray && pathArray.length) {
        return pathArray[pathArray.length - 1];
    }
    return {};
}
/**
 * 获取当前url路径
 * @param isQuery 是否获取参数
 * @returns
 */
function getPath(isQuery) {
    var self = getCurrentPage();
    var path = self.route;
    if (isQuery) {
        var options_1 = eventAttribute.pageview.query[self.$id];
        if (!options_1) return path;
        var optionArr = Object.keys(options_1);
        // 组件完整 URL
        if (optionArr.length) {
            var parameter_1 = '';
            optionArr.forEach(function (o, i) {
                i && (parameter_1 += '&');
                parameter_1 += o + '=' + options_1[o];
            });
            return path + '?' + parameter_1;
        }
    }
    return path;
}
function getReferer() {
    var pathArray = getCurrentPages();
    if (pathArray && pathArray.length) {
        var self = pathArray[pathArray.length - 2];
        if (self) {
            return self.route;
        }
    }
    return pathParams.scene + '';
}
//# sourceMappingURL=index.js.map

// 类型转换
/**
 * 值转换成字符串
 */
function valToString(value) {
    if (value === undefined || value === null) {
        return '';
    }
    if (isObject(value)) {
        return JSON.stringify(value);
    }
    return value + '';
}
/**
 * 值转换成数字
 * @param value
 */
function valToNumber(value) {
    if (value === undefined || value === null || value === '') {
        return '';
    }
    if (value >= -Infinity) {
        return value - 0;
    }
    return '';
}
//# sourceMappingURL=transform.js.map

/**
 * 全埋点相关属性存储
 */
var userClickAttrs = {};
//# sourceMappingURL=clickElement.js.map

/**
 * 获取属性值
 */
var getAttr = {
    xwho: function xwho() {
        return getId();
    },
    xwhen: function xwhen() {
        return getNow();
    },
    xwhat: function xwhat(_xwhat) {
        return _xwhat;
    },
    $lib: function $lib$1() {
        return $lib;
    },
    $lib_version: function $lib_version$1() {
        return $lib_version;
    },
    $platform: function $platform() {
        return $lib;
    },
    $debug: function $debug() {
        return config.debugMode;
    },
    $is_login: function $is_login() {
        return !!core.ARK_LOGINID;
    },
    $session_id: function $session_id() {
        return getSessionId();
    },
    $screen_width: function $screen_width() {
        return system.screenWidth;
    },
    $screen_height: function $screen_height() {
        return system.screenHeight;
    },
    $os: function $os() {
        var os = system.system;
        return  '';
    },
    $browser: function $browser() {
        return '';
    },
    $brand: function $brand() {
        return system.brand;
    },
    $browser_version: function $browser_version() {
        return system.version;
    },
    $os_version: function $os_version() {
        return system.system ? system.system.split(' ')[1] : '';
    },
    $model: function $model() {
        return system.model;
    },
    $language: function $language() {
        return system.language;
    },
    $network: function $network() {
        return network.networkType;
    },
    $time_zone: function $time_zone() {
        return 'GMT' + clientTimeZone();
    },
    $startup_time: function $startup_time() {
        return '';
    },
    // 是否安装后首次访问
    $is_first_time: function $is_first_time() {
        return !core.ARKFRISTPROFILE;
    },
    // 是否安装后首日访问
    $is_first_day: function $is_first_day() {
        var datetime = core.ARKFRISTPROFILE;
        if (!datetime) {
            return true;
        }
        return dateFormat(new Date(getNow()), 'yyyyMMdd') === dateFormat(new Date(datetime), 'yyyyMMdd');
    },
    $first_visit_time: function $first_visit_time() {
        return core.ARKFRISTPROFILE;
    },
    $first_visit_language: function $first_visit_language() {
        return system.language;
    },
    $original_id: function $original_id() {
        return core.ARK_TRACKID || core.ARK_ID;
    },
    // 是否校准了时间
    $is_time_calibrated: function $is_time_calibrated() {
        return config.allowTimeCheck && timeDiff ? true : false;
    },
    // url 相关
    $scene: function $scene() {
        return pathParams.scene.toString();
    },
    $referrer: function $referrer() {
        return getReferer();
    },
    $url: function $url() {
        return getPath(config.autoCompleteURL);
    },
    $url_path: function $url_path() {
        return getPath();
    },
    // 页面URL-去参的页面URL
    $url_domain: function $url_domain() {
        return getPath();
    },
    $utm_campaign_id: function $utm_campaign_id() {
        return pathParams.utm_campaign_id;
    },
    $utm_source: function $utm_source() {
        return pathParams.utm_source;
    },
    $utm_medium: function $utm_medium() {
        return pathParams.utm_medium;
    },
    $utm_term: function $utm_term() {
        return pathParams.utm_term;
    },
    $utm_content: function $utm_content() {
        return pathParams.utm_content;
    },
    $utm_campaign: function $utm_campaign() {
        return pathParams.utm_campaign;
    },
    $share_id: function $share_id() {
        return pathParams.share_id;
    },
    $share_level: function $share_level() {
        return valToNumber(pathParams.share_level);
    },
    $share_path: function $share_path() {
        return pathParams.share_path;
    },
    // 点击元素相关
    $element_content: function $element_content() {
        return valToString(userClickAttrs.element_content);
    },
    $element_id: function $element_id() {
        return valToString(userClickAttrs.element_id);
    },
    $element_type: function $element_type() {
        return valToString(userClickAttrs.element_type);
    },
    $element_function: function $element_function() {
        return valToString(userClickAttrs.element_function);
    },
    $element_name: function $element_name() {
        return valToString(userClickAttrs.element_name);
    },
    $appid: function $appid() {
        return config.$appid;
    },
    $appname: function $appname() {
        return config.$appname;
    }
};
//# sourceMappingURL=getAttr.js.map

function fillData (eventName) {
    var obj = {
        appid: config.appkey,
        xwho: getAttr.xwho(),
        xwhat: getAttr.xwhat(eventName),
        xwhen: getAttr.xwhen(),
        xcontext: {}
    };
    var event = events[eventName];
    // 设置事件属性
    function setEventAttr(attrName) {
        var getAttrFn = getAttr[attrName];
        if (getAttrFn) {
            var value = getAttrFn();
            if (value !== '' && value !== null && value !== undefined) {
                obj.xcontext[attrName] = value;
            }
        }
    }
    // 填充公共属性
    publicAttrs.forEach(function (o) {
        setEventAttr(o);
    });
    // 填充事件私有属性
    if (event) {
        event.forEach(function (o) {
            setEventAttr(o);
        });
    }
    return obj;
}
//# sourceMappingURL=index.js.map

/**
 * 页面属性
 */
var pageProperty = {};
/**
 * 设置页面属性
 * @param properties
 */
function setPageProperty(properties) {
  pageProperty = Object.assign({}, pageProperty, properties);
}
//# sourceMappingURL=pageProperty.js.map

function sendProfile(eventName, propertyName, propertyValue) {
    // 获取上报数据模块
    var res = fillData(eventName);
    var property = {};
    if (isObject(propertyName)) {
        property = propertyName;
    }
    if (lengthCheck(propertyName) && attrValueCheck(propertyValue)) {
        property[propertyName] = propertyValue;
    }
    res.xcontext = Object.assign({}, res.xcontext, attrCheck(property, eventName));
    sendData(res);
}
/**
 * 设置用户固有属性
 * @param propertyName
 * @param propertyValue
 */
function profileSetOnce(propertyName, propertyValue) {
    sendProfile('$profile_set_once', propertyName, propertyValue);
}
/**
 * 给用户设置单个或多个属性，如果之前不存在，则新建，否则覆盖
 * @param propertyName
 * @param propertyValue
 */
function profileSet(propertyName, propertyValue) {
    sendProfile('$profile_set', propertyName, propertyValue);
}
/**
 * 设置用户属性的相对变化值(相对增加，减少)，只能对数值型属性进行操作，如果这个 Profile之前不存在，则初始值为0。
 * @param propertyName
 * @param propertyValue
 */
function profileIncrement(propertyName, propertyValue) {
    sendProfile('$profile_increment', propertyName, propertyValue);
}
/**
 * 用户列表属性增加元素。
 * @param propertyName
 * @param propertyValue
 */
function profileAppend(propertyName, propertyValue) {
    sendProfile('$profile_append', propertyName, propertyValue);
}
/**
 * 删除当前用户单个属性值
 * @param propertyName
 */
function profileUnset(propertyName) {
    var _a;
    // 获取上报数据模块
    var res = fillData('$profile_unset');
    if (attrNameCheck(propertyName)) {
        res.xcontext = Object.assign({}, res.xcontext, (_a = {}, _a[propertyName] = '', _a));
    } else {
        errorLog({
            code: 600010,
            fn: 'profileUnset',
            key: propertyName
        });
    }
    sendData(res);
}
/**
 * 删除当前用户所有属性值
 */
function profileDelete() {
    // 获取上报数据模块
    var res = fillData('$profile_delete');
    sendData(res);
}
//# sourceMappingURL=profile.js.map

function reset() {
    resetCore();
    if (config.autoProfile === true) {
        profileSetOnce({
            '$reset_time': dateFormat(new Date(), 'yyyy-MM-dd hh:mm:ss.SSS')
        });
    }
    successLog({
        fn: '$reset',
        code: 20005
    });
}
//# sourceMappingURL=reset.js.map

/**
 * 记录自定义事件的持续时长
 * @param eventName 事件名称
 */
function timeEvent(eventName) {
  eventAttribute.timeEvent[eventName] = getNow();
}
//# sourceMappingURL=timeEvent.js.map

/**
* 获取预置属性
* @returns object
*/
function getPresetProperties() {
    // 获取上报数据模块
    var res = fillData('$getPresetProperties');
    delete res.xcontext.$is_login;
    successLog({
        code: 20010,
        fn: 'getPresetProperties',
        value: res.xcontext
    });
    return res.xcontext;
}
//# sourceMappingURL=presetProperties.js.map

/**
 * 唯一匿名ID标识设置
 * @param distinctId 自定义设备身份标识，取值长度 1 - 255字符, 支持类型：String
 */
function identify(distinctId) {
    if (lengthCheck(distinctId)) {
        setAnonymousID(distinctId);
        successLog({
            code: 20002,
            value: distinctId,
            fn: 'identify'
        });
        // ea 触达
        globalWindow.AnalysysModal && globalWindow.AnalysysModal([{ xwhat: '$identify', xwho: distinctId }]);
    } else {
        errorLog({
            code: 60009,
            fn: 'identify',
            value: distinctId
        });
    }
}
/**
 * 获取用户通过identify接口设置或自动生成的id，优先级如下： 用户设置的id > 代码自动生成的id
 * @returns
 */
function getDistinctId(callback) {
    var id = getAnonymousID();
    callback && callback(id);
    return id;
}
//# sourceMappingURL=identify.js.map

/**
 * 注册页面自动采集自定义属性
 */
function pageProperty$1(properties) {
    var methodName = '$pageProperty';
    var attrs = attrCheck(properties, methodName);
    setPageProperty(attrs);
    if (Object.keys(attrs).length) {
        successLog({
            fn: methodName,
            code: 20002,
            value: properties
        });
    }
}
//# sourceMappingURL=pageProperty.js.map

function share(toShareProperties, properties) {
    var xwho = getId();
    var pageUrl = getPath();
    var shareLevel = Number(pathParams.share_level) + 1;
    if (!isObject(toShareProperties)) {
        toShareProperties = {
            path: pageUrl
        };
    }
    ready()();
    var shareParam = 'share_id=' + xwho + '&share_level=' + shareLevel + '&share_path=' + encodeURIComponent(pageUrl);
    toShareProperties.path = toShareProperties.path || pageUrl;
    var str = toShareProperties.path.indexOf('?') > -1 ? '&' : '?';
    toShareProperties.path = toShareProperties.path + str + shareParam;
    return toShareProperties;
}
//# sourceMappingURL=share.js.map

var ArkWxSdk = /** @class */function () {
    function ArkWxSdk() {
        this.config = optionsDefault();
        this.appStart = ready();
        this.pageView = ready();
        this.share = share;
        this.registerSuperProperty = registerSuperProperty;
        this.registerSuperProperties = registerSuperProperties;
        this.getSuperProperty = getSuperProperty$1;
        this.getSuperProperties = getSuperProperties;
        this.unRegisterSuperProperty = unRegisterSuperProperty;
        this.clearSuperProperties = clearSuperProperties;
        this.profileSetOnce = profileSetOnce;
        this.profileSet = profileSet;
        this.profileAppend = profileAppend;
        this.profileIncrement = profileIncrement;
        this.profileDelete = profileDelete;
        this.profileUnset = profileUnset;
        this.reset = reset;
        this.track = ready();
        this.timeEvent = timeEvent;
        this.alias = ready();
        this.getPresetProperties = getPresetProperties;
        this.identify = identify;
        this.getDistinctId = getDistinctId;
        this.pageProperty = pageProperty$1;
        coreInit();
    }
    // 初始化传入配置
    ArkWxSdk.prototype.init = function (config) {
        var _this_1 = this;
        setConfig(config).then(function (o) {
            _this_1.config = o;
            successLog({
                code: 20007
            });
        });
    };
    return ArkWxSdk;
}();
// 初始化传入配置
Object.keys(optionsDefault()).forEach(function (o) {
    Object.defineProperty(ArkWxSdk.prototype, o, {
        get: function get() {
            return this.config[o];
        },
        set: function set(value) {
            var _a;
            var _this = this;
            setConfig((_a = {}, _a[o] = value, _a)).then(function (o) {
                _this.config = o;
            });
        },
        enumerable: false,
        configurable: true
    });
});
var ArkSdk = new ArkWxSdk();
globalWindow.AnalysysAgent = ArkSdk;
//# sourceMappingURL=indexCustom.js.map

export default ArkSdk;
